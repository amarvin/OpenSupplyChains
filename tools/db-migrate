#!/bin/bash

# Copyright (C) Sourcemap 2011
# This program is free software: you can redistribute it and/or modify it under the terms
# of the GNU Affero General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License along with this
# program. If not, see <http://www.gnu.org/licenses/>.

echo ""

if [[ $1 = "-h" || $1 = "--help"  ]]; then
	cat <<FRED
	Usage: db-migrate [-h|--help] envname  up/dn  [currentidx]  
		Loads enviornment variables specified in PATH_TO_DBMIGRATE/env/envname the
		Loads the num.FOO..up.sql or num.FOO..dn.sql files as specified in second arg from (in order)
			${SOURCEMAP_DIR}/db/schema
			${SOURCEMAP_DIR}/db/data
			${SOURCEMAP_DIR}/db/fixtures
	
	If the third argument is given it is assumed that the database has already been migrated to that index
	
FRED
	exit 0
fi

	 
cd "$(dirname "${0}")" # Change to directory db-migrate is in so we get enviornment relative to that
source "env/${1}" &> /dev/null || source "${1}" &> /dev/null 

if [[ ! $? = 0 ]]; then
	echo -e "\t- ** FATAL: Enviornment file is invalid/nonexistant\n"
fi

if [[ -z "${SOURCEMAP_ENV}" || -z "${SMAP_DB}" || -z "${SMAP_DBHOST}" || -z "${SOURCEMAP_DIR}" ]]; then
    echo -e "\t- ** FATAL: Enviornment file is incomplete\n"
    exit 1
fi

echo ""
echo -e "\t- Set env to \"${SOURCEMAP_ENV}\"."

if [ ! -n "${2}" ]; then
    echo -e "\t- ** FATAL: No up/dn parameter given.\n"
    exit 1
fi

case "${2}" in

"up"|"dn")
    echo -e "\t- Setting migration direction to \"${2}\"."
    mdir="${2}"
    ;;
*)
    echo -e "\t** FATAL: Up/dn parameter \"${2}\" invalid.\n"
    exit 1
    ;;
esac

if [ "${mdir}" == "up" ]; then
    STARTIDX="00"
    STOPIDX="ZZ"
elif [ "${mdir}" == "dn" ]; then
    STARTIDX="ZZ"
    STOPIDX="00"
fi

if [ -n "${3}" ]; then
    case "${mdir}" in
        "up")
            STARTIDX="${3}"
            STOPIDX="ZZZ"
            ;;
        "dn")
            STOPIDX="${3}"
            STARTIDX="ZZZ"
            ;;
    esac
    echo -e "\t- Set start idx = \"${STARTIDX}\", stop idx = \"${STOPIDX}\"."
fi

SMAP_ROOTDIR="${SOURCEMAP_DIR}"
SMAP_DATADIR="${SMAP_ROOTDIR}/db/data/"
SMAP_FIXTUREDIR="${SMAP_ROOTDIR}/db/fixtures/"
SMAP_SCHEMADIR="${SMAP_ROOTDIR}/db/schema/"

if [ "${mdir}" = "dn" ]; then
    sortcmd="sort -r"
else
    sortcmd="sort"
fi

# set postgresql creds (from env/<env>)
PGUSER="${SMAP_DBUSER}"
PGPASSWORD="${SMAP_DBPASS}"
PGHOST="${SMAP_DBHOST}"
PGDATABASE="${SMAP_DB}"

export PGUSER PGPASSWORD PGHOST PGDATABASE

SCHEMAFILES=$(find "${SMAP_SCHEMADIR}" -name "*.${mdir}.sql" -o -name "*.${mdir}.sql" | $sortcmd) 

DATESTR=`date "+%Y%m%d.%H%M%S"`
DBOUTPUT="db-migrate.${1}.${DATESTR}.${mdir}.out"
DUMPOUTPUT="${1}.${DATESTR}.${mdir}.dump"

if [ "${SOURCEMAP_ENV}" = "development" ]; then
    echo -e "\t- Skipping backup..."
else
    echo -e "\t- Backing up current schema and data..."
    pg_dump | bzip2 -cz > "${DUMPOUTPUT}.bz2"
    echo -e "\t\t- done."
fi

for sfile in ${SCHEMAFILES[@]}
do
    sfilebase=`basename ${sfile}`
    sfilenum=`echo -n "${sfilebase}" | cut -d "." -f 1`
    if [ "${mdir}" == "up" ]; then
        if [ "${sfilebase}" \< "${STARTIDX}" ]; then
            echo -e "\t- Skipping ${sfilebase}."
            continue
        fi
    elif [ "${mdir}" == "dn" ]; then
        if [ "${sfilebase}" \< "${STOPIDX}" ]; then
            echo -e "\t- Skipping ${sfilebase}."
            continue
        fi
    else
        echo -e "\t- FATAL: Migration direction is borked."
        exit 1
    fi
    echo -e "\t- Executing schema sql: ${sfilebase}"
    psql --echo-all < "${sfile}" >> "${DBOUTPUT}" 2>> "${DBOUTPUT}"

    DATAFILES=$(find "${SMAP_DATADIR}" -name "${sfilenum}.*.${mdir}.sql" -o -name "${sfilenum}.*.${mdir}.sql.bz2" | $sortcmd)
    for dfile in ${DATAFILES[@]}
    do
        dfilebase=`basename "${dfile}"`
        echo -e "\t\t- Executing data sql: ${dfilebase}"
        if [[ "$dfile" =~ ".bz2" ]]; then
            bzcat "${SMAP_DATADIR}${dfilebase}" | psql --echo-all >> "${DBOUTPUT}" 2>> "${DBOUTPUT}"
        else
            psql --echo-all < "${SMAP_DATADIR}${dfilebase}" >> "${DBOUTPUT}" 2>> "${DBOUTPUT}"
        fi
    done

    FIXTUREFILES=$(find "${SMAP_FIXTUREDIR}" -name "${sfilenum}.*.${mdir}.sql" | $sortcmd)
    for ffile in ${FIXTUREFILES[@]}
    do
        ffilebase=`basename "${ffile}"`
        echo -e "\t\t- Executing fixture sql: ${ffilebase}"
        psql --echo-all < "${SMAP_FIXTUREDIR}${ffilebase}" >> "${DBOUTPUT}" 2>> "${DBOUTPUT}"
    done

    echo -e "\t\t- ...${sfilebase} done."
done

PGUSER=""
PGPASSWORD=""
export PGUSER PGPASSWORD
echo
